import * as XLSX from 'xlsx';
import fs from 'fs';
import path from 'path';
import { AutomationStats, WalletPair, TransactionResult, ContractDeployResult } from '../types';
import { config } from '../config';
import { logger } from '../utils/logger';

export interface ExcelWalletData {
  –Ω–æ–º–µ—Ä: number;
  solana_–∞–¥—Ä–µ—Å: string;
  evm_–∞–¥—Ä–µ—Å: string;
  solana_–±–∞–ª–∞–Ω—Å: number;
  evm_–±–∞–ª–∞–Ω—Å: string;
  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: number;
  –≤—Ä–µ–º—è_—Å–æ–∑–¥–∞–Ω–∏—è: string;
}

export interface ExcelTransactionData {
  –Ω–æ–º–µ—Ä: number;
  —Ö—ç—à: string;
  –æ—Ç_–∫–æ—à–µ–ª—å–∫–∞: string;
  –∫_–∫–æ—à–µ–ª—å–∫—É: string;
  —Å—É–º–º–∞_eth: string;
  –≥–∞–∑_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: number;
  —É—Å–ø–µ—à–Ω–∞—è: boolean;
  –≤—Ä–µ–º—è: string;
  —Ç–∏–ø_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: string;
}

export interface ExcelContractData {
  –Ω–æ–º–µ—Ä: number;
  –∞–¥—Ä–µ—Å_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: string;
  –≤–ª–∞–¥–µ–ª–µ—Ü: string;
  —Ö—ç—à_–¥–µ–ø–ª–æ—è: string;
  –≥–∞–∑_–¥–µ–ø–ª–æ—è: number;
  —É—Å–ø–µ—à–Ω—ã–π_–¥–µ–ø–ª–æ–π: boolean;
  –≤—Ä–µ–º—è_–¥–µ–ø–ª–æ—è: string;
  –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: number;
}

export interface ExcelSummaryData {
  –ø–∞—Ä–∞–º–µ—Ç—Ä: string;
  –∑–Ω–∞—á–µ–Ω–∏–µ: string | number;
  –æ–ø–∏—Å–∞–Ω–∏–µ: string;
}

export class ExcelStats {
  private excelPath: string;
  private walletData: ExcelWalletData[] = [];
  private transactionData: ExcelTransactionData[] = [];
  private contractData: ExcelContractData[] = [];
  private summaryData: ExcelSummaryData[] = [];
  private transactionCounter: number = 0;
  private contractCounter: number = 0;

  constructor() {
    this.excelPath = path.join(process.cwd(), config.excel.fileName);
  }

  public initializeSummary(stats: AutomationStats): void {
    const startTime = new Date(stats.startTime);
    const endTime = stats.endTime ? new Date(stats.endTime) : new Date();
    const duration = Math.round((endTime.getTime() - startTime.getTime()) / 1000);

    this.summaryData = [
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞', –∑–Ω–∞—á–µ–Ω–∏–µ: startTime.toLocaleString('ru-RU'), –æ–ø–∏—Å–∞–Ω–∏–µ: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', –∑–Ω–∞—á–µ–Ω–∏–µ: endTime.toLocaleString('ru-RU'), –æ–ø–∏—Å–∞–Ω–∏–µ: '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)', –∑–Ω–∞—á–µ–Ω–∏–µ: duration, –æ–ø–∏—Å–∞–Ω–∏–µ: '–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–ö–æ—à–µ–ª—å–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ', –∑–Ω–∞—á–µ–Ω–∏–µ: stats.walletsCreated, –æ–ø–∏—Å–∞–Ω–∏–µ: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–û–±—â–∏–π –±–∞–ª–∞–Ω—Å SOL', –∑–Ω–∞—á–µ–Ω–∏–µ: stats.solanaBalance.toFixed(4), –æ–ø–∏—Å–∞–Ω–∏–µ: '–°—É–º–º–∞ –≤—Å–µ—Ö SOL –±–∞–ª–∞–Ω—Å–æ–≤' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–û–±—â–∏–π –±–∞–ª–∞–Ω—Å rSOL', –∑–Ω–∞—á–µ–Ω–∏–µ: stats.rSolBalance.toFixed(4), –æ–ø–∏—Å–∞–Ω–∏–µ: '–°—É–º–º–∞ –≤—Å–µ—Ö rSOL –±–∞–ª–∞–Ω—Å–æ–≤' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–ë—Ä–∏–¥–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ', –∑–Ω–∞—á–µ–Ω–∏–µ: stats.bridgesCompleted, –æ–ø–∏—Å–∞–Ω–∏–µ: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL ‚Üí rSOL –æ–ø–µ—Ä–∞—Ü–∏–π' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∑–∞–¥–µ–ø–ª–æ–µ–Ω–æ', –∑–Ω–∞—á–µ–Ω–∏–µ: stats.contractsDeployed, –æ–ø–∏—Å–∞–Ω–∏–µ: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π', –∑–Ω–∞—á–µ–Ω–∏–µ: stats.transactionsCompleted, –æ–ø–∏—Å–∞–Ω–∏–µ: '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–û—à–∏–±–æ–∫', –∑–Ω–∞—á–µ–Ω–∏–µ: stats.errors.length, –æ–ø–∏—Å–∞–Ω–∏–µ: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: 'Seed —Ñ—Ä–∞–∑–∞', –∑–Ω–∞—á–µ–Ω–∏–µ: config.wallet.seed, –æ–ø–∏—Å–∞–Ω–∏–µ: '–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è seed —Ñ—Ä–∞–∑–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–æ–≤' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: 'RPC Solana', –∑–Ω–∞—á–µ–Ω–∏–µ: config.solana.rpcUrl, –æ–ø–∏—Å–∞–Ω–∏–µ: '–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π RPC –¥–ª—è Solana' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: 'RPC Rome', –∑–Ω–∞—á–µ–Ω–∏–µ: config.rome.rpcUrl, –æ–ø–∏—Å–∞–Ω–∏–µ: '–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π RPC –¥–ª—è Rome Protocol' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: 'Headless —Ä–µ–∂–∏–º', –∑–Ω–∞—á–µ–Ω–∏–µ: config.browser.headless ? '–î–∞' : '–ù–µ—Ç', –æ–ø–∏—Å–∞–Ω–∏–µ: '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±—Ä–∞—É–∑–µ—Ä–∞' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–ú–∏–Ω. –∑–∞–¥–µ—Ä–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–µ–∫)', –∑–Ω–∞—á–µ–Ω–∏–µ: config.activity.minDelayMs / 1000, –æ–ø–∏—Å–∞–Ω–∏–µ: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏' },
      { –ø–∞—Ä–∞–º–µ—Ç—Ä: '–ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–µ–∫)', –∑–Ω–∞—á–µ–Ω–∏–µ: config.activity.maxDelayMs / 1000, –æ–ø–∏—Å–∞–Ω–∏–µ: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏' }
    ];

    if (stats.errors.length > 0) {
      stats.errors.forEach((error, index) => {
        this.summaryData.push({
          –ø–∞—Ä–∞–º–µ—Ç—Ä: `–û—à–∏–±–∫–∞ ${index + 1}`,
          –∑–Ω–∞—á–µ–Ω–∏–µ: error,
          –æ–ø–∏—Å–∞–Ω–∏–µ: '–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏'
        });
      });
    }
  }

  public addWallet(wallet: WalletPair, index: number): void {
    this.walletData.push({
      –Ω–æ–º–µ—Ä: index + 1,
      solana_–∞–¥—Ä–µ—Å: wallet.solana.publicKey,
      evm_–∞–¥—Ä–µ—Å: wallet.evm.address,
      solana_–±–∞–ª–∞–Ω—Å: 0,
      evm_–±–∞–ª–∞–Ω—Å: '0',
      –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: 0,
      –≤—Ä–µ–º—è_—Å–æ–∑–¥–∞–Ω–∏—è: new Date().toLocaleString('ru-RU')
    });
  }

  public updateWalletBalance(address: string, solBalance: number, evmBalance: string): void {
    const wallet = this.walletData.find(w => w.evm_–∞–¥—Ä–µ—Å === address || w.solana_–∞–¥—Ä–µ—Å === address);
    if (wallet) {
      wallet.solana_–±–∞–ª–∞–Ω—Å = solBalance;
      wallet.evm_–±–∞–ª–∞–Ω—Å = evmBalance;
    }
  }

  public addTransaction(result: TransactionResult, fromAddress: string, toAddress: string, amount: string, activityType: string): void {
    this.transactionCounter++;
    this.transactionData.push({
      –Ω–æ–º–µ—Ä: this.transactionCounter,
      —Ö—ç—à: result.hash,
      –æ—Ç_–∫–æ—à–µ–ª—å–∫–∞: fromAddress,
      –∫_–∫–æ—à–µ–ª—å–∫—É: toAddress,
      —Å—É–º–º–∞_eth: amount,
      –≥–∞–∑_–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: result.gasUsed || 0,
      —É—Å–ø–µ—à–Ω–∞—è: result.success,
      –≤—Ä–µ–º—è: new Date(result.timestamp).toLocaleString('ru-RU'),
      —Ç–∏–ø_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: activityType
    });

    // Update interaction count for wallet
    const wallet = this.walletData.find(w => w.evm_–∞–¥—Ä–µ—Å === fromAddress);
    if (wallet) {
      wallet.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π++;
    }
  }

  public addContract(result: ContractDeployResult, ownerAddress: string): void {
    this.contractCounter++;
    this.contractData.push({
      –Ω–æ–º–µ—Ä: this.contractCounter,
      –∞–¥—Ä–µ—Å_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: result.address,
      –≤–ª–∞–¥–µ–ª–µ—Ü: ownerAddress,
      —Ö—ç—à_–¥–µ–ø–ª–æ—è: result.hash,
      –≥–∞–∑_–¥–µ–ø–ª–æ—è: 0, // Will be updated if available
      —É—Å–ø–µ—à–Ω—ã–π_–¥–µ–ø–ª–æ–π: result.success,
      –≤—Ä–µ–º—è_–¥–µ–ø–ª–æ—è: new Date().toLocaleString('ru-RU'),
      –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: 0
    });
  }

  public addContractInteraction(contractAddress: string): void {
    const contract = this.contractData.find(c => c.–∞–¥—Ä–µ—Å_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ === contractAddress);
    if (contract) {
      contract.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π++;
    }
  }

  public async saveToExcel(): Promise<void> {
    if (!config.excel.saveStats) {
      logger.info('Excel —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      return;
    }

    try {
      const workbook = XLSX.utils.book_new();

      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
      const summarySheet = XLSX.utils.json_to_sheet(this.summaryData);
      XLSX.utils.book_append_sheet(workbook, summarySheet, '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');

      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ "–ö–æ—à–µ–ª—å–∫–∏"
      const walletsSheet = XLSX.utils.json_to_sheet(this.walletData);
      XLSX.utils.book_append_sheet(workbook, walletsSheet, '–ö–æ—à–µ–ª—å–∫–∏');

      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
      if (this.transactionData.length > 0) {
        const transactionsSheet = XLSX.utils.json_to_sheet(this.transactionData);
        XLSX.utils.book_append_sheet(workbook, transactionsSheet, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ "–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã"
      if (this.contractData.length > 0) {
        const contractsSheet = XLSX.utils.json_to_sheet(this.contractData);
        XLSX.utils.book_append_sheet(workbook, contractsSheet, '–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã');
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ "–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
      const activitySummary = this.generateActivitySummary();
      const activitySheet = XLSX.utils.json_to_sheet(activitySummary);
      XLSX.utils.book_append_sheet(workbook, activitySheet, '–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      XLSX.writeFile(workbook, this.excelPath);

      logger.info(`üìä Excel —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${this.excelPath}`);
      logger.info(`üìÅ –°–æ–∑–¥–∞–Ω–æ –ª–∏—Å—Ç–æ–≤: ${workbook.SheetNames.length}`);
      logger.info(`üëõ –ö–æ—à–µ–ª—å–∫–æ–≤: ${this.walletData.length}`);
      logger.info(`üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${this.transactionData.length}`);
      logger.info(`üìú –ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: ${this.contractData.length}`);

    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞:', error);
    }
  }

  private generateActivitySummary(): any[] {
    const summary = [];

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–∏–ø–∞–º
    const transactionsByType = this.transactionData.reduce((acc, tx) => {
      acc[tx.—Ç–∏–ø_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏] = (acc[tx.—Ç–∏–ø_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    summary.push({ —Ç–∏–ø: '–¢–†–ê–ù–ó–ê–ö–¶–ò–ò –ü–û –¢–ò–ü–ê–ú', –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: '', –ø—Ä–æ—Ü–µ–Ω—Ç: '', –æ–ø–∏—Å–∞–Ω–∏–µ: '' });
    Object.entries(transactionsByType).forEach(([type, count]) => {
      const percent = ((count / this.transactionData.length) * 100).toFixed(1);
      summary.push({
        —Ç–∏–ø: type,
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: count,
        –ø—Ä–æ—Ü–µ–Ω—Ç: `${percent}%`,
        –æ–ø–∏—Å–∞–Ω–∏–µ: this.getActivityDescription(type)
      });
    });

    summary.push({ —Ç–∏–ø: '', –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: '', –ø—Ä–æ—Ü–µ–Ω—Ç: '', –æ–ø–∏—Å–∞–Ω–∏–µ: '' });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
    summary.push({ —Ç–∏–ø: '–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–û–®–ï–õ–¨–ö–ê–ú', –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: '', –ø—Ä–æ—Ü–µ–Ω—Ç: '', –æ–ø–∏—Å–∞–Ω–∏–µ: '' });
    this.walletData.forEach(wallet => {
      summary.push({
        —Ç–∏–ø: `–ö–æ—à–µ–ª–µ–∫ ${wallet.–Ω–æ–º–µ—Ä}`,
        –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: wallet.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π,
        –ø—Ä–æ—Ü–µ–Ω—Ç: wallet.evm_–±–∞–ª–∞–Ω—Å + ' ETH',
        –æ–ø–∏—Å–∞–Ω–∏–µ: wallet.evm_–∞–¥—Ä–µ—Å
      });
    });

    summary.push({ —Ç–∏–ø: '', –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: '', –ø—Ä–æ—Ü–µ–Ω—Ç: '', –æ–ø–∏—Å–∞–Ω–∏–µ: '' });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
    if (this.contractData.length > 0) {
      summary.push({ —Ç–∏–ø: '–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–û–ù–¢–†–ê–ö–¢–ê–ú', –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: '', –ø—Ä–æ—Ü–µ–Ω—Ç: '', –æ–ø–∏—Å–∞–Ω–∏–µ: '' });
      this.contractData.forEach(contract => {
        summary.push({
          —Ç–∏–ø: `–ö–æ–Ω—Ç—Ä–∞–∫—Ç ${contract.–Ω–æ–º–µ—Ä}`,
          –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: contract.–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π,
          –ø—Ä–æ—Ü–µ–Ω—Ç: contract.—É—Å–ø–µ—à–Ω—ã–π_–¥–µ–ø–ª–æ–π ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—à–∏–±–∫–∞',
          –æ–ø–∏—Å–∞–Ω–∏–µ: contract.–∞–¥—Ä–µ—Å_–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        });
      });
    }

    return summary;
  }

  private getActivityDescription(type: string): string {
    const descriptions: Record<string, string> = {
      '–°–ª—É—á–∞–π–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥': '–ü–µ—Ä–µ–≤–æ–¥ ETH –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏',
      '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º': '–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
      '–î–µ–ø–ª–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞': '–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
      '–ú—É–ª—å—Ç–∏-–ø–µ—Ä–µ–≤–æ–¥': '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
      '–í—ã–∑–æ–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞': '–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞',
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤'
    };
    return descriptions[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏';
  }

  public async loadExistingData(): Promise<void> {
    if (!fs.existsSync(this.excelPath)) {
      return;
    }

    try {
      const workbook = XLSX.readFile(this.excelPath);
      
      // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
      if (workbook.SheetNames.includes('–ö–æ—à–µ–ª—å–∫–∏')) {
        const walletsSheet = workbook.Sheets['–ö–æ—à–µ–ª—å–∫–∏'];
        const existingWallets = XLSX.utils.sheet_to_json(walletsSheet) as ExcelWalletData[];
        this.walletData = [...existingWallets];
      }

      // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      if (workbook.SheetNames.includes('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')) {
        const transactionsSheet = workbook.Sheets['–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'];
        const existingTransactions = XLSX.utils.sheet_to_json(transactionsSheet) as ExcelTransactionData[];
        this.transactionData = [...existingTransactions];
        this.transactionCounter = Math.max(...existingTransactions.map(t => t.–Ω–æ–º–µ—Ä), 0);
      }

      // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
      if (workbook.SheetNames.includes('–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã')) {
        const contractsSheet = workbook.Sheets['–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã'];
        const existingContracts = XLSX.utils.sheet_to_json(contractsSheet) as ExcelContractData[];
        this.contractData = [...existingContracts];
        this.contractCounter = Math.max(...existingContracts.map(c => c.–Ω–æ–º–µ—Ä), 0);
      }

      logger.info(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel: –∫–æ—à–µ–ª—å–∫–æ–≤ ${this.walletData.length}, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ${this.transactionData.length}, –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ ${this.contractData.length}`);

    } catch (error) {
      logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ Excel:', error);
    }
  }

  public getStats(): {
    wallets: number;
    transactions: number;
    contracts: number;
    filePath: string;
  } {
    return {
      wallets: this.walletData.length,
      transactions: this.transactionData.length,
      contracts: this.contractData.length,
      filePath: this.excelPath
    };
  }
}